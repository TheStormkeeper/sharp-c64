namespace SharpC64
{
    
    /// <summary>
    /// A list of all the 6510 op-codes.  Originally derived from the JaC64 project
    /// </summary>
    public enum MOS6510Ops
    {
        BRK = 0x00,
        ORA_INDX = 0x01, // (Indirect, X)
        ORA_Z = 0x05, // Zero Page
        ASL_Z = 0x06, // Zero Page
        PHP = 0x08,
        ORA_I = 0x09, // Immediate
        ASL_ACC = 0x0A, // Accumulator
        ORA = 0x0D, // Absolute
        ASL = 0x0E, // Absolute
        BPL = 0x10,
        ORA_INDY = 0x11, // (Indirect),Y
        ORA_ZX = 0x15, // Zero Page,X
        ASL_ZX = 0x16, // Zero Page,X
        CLC = 0x18,
        ORA_Y = 0x19, // Absolute,Y
        ORA_X = 0x1D, // Absolute,X
        ASL_X = 0x1E, // Absolute,X
        JSR = 0x20,
        AND_INDX = 0x21, // (Indirect,X)
        BIT_Z = 0x24, // Zero Page
        AND_Z = 0x25, // Zero Page
        ROL_Z = 0x26, // Zero Page
        PLP = 0x28, //
        AND_I = 0x29, // Immediate
        ROL_ACC = 0x2A, // Accumulator
        BIT = 0x2C, // Absolute
        AND = 0x2D, // Absolute
        ROL = 0x2E, // Absolute
        BMI = 0x30, //
        AND_INDY = 0x31, // (Indirect),Y
        AND_ZX = 0x35, // Zero Page,X
        ROL_ZX = 0x36, // Zero Page,X
        SEC = 0x38, //
        AND_Y = 0x39, // Absolute,Y
        AND_X = 0x3D, // Absolute,X
        ROL_X = 0x3E, // Absolute,X
        RTI = 0x40, //
        EOR_INDX = 0x41, // (Indirect,X)
        EOR_Z = 0x45, // Zero Page
        LSR_Z = 0x46, // Zero Page
        PHA = 0x48, //
        EOR_I = 0x49, // Immediate
        LSR_ACC = 0x4A, // Accumulator
        JMP = 0x4C, // Absolute
        EOR = 0x4D, // Absolute
        LSR = 0x4E, // Absolute
        BVC = 0x50, //
        EOR_INDY = 0x51, // (Indirect),Y
        EOR_ZX = 0x55, // Zero Page,X
        LSR_ZX = 0x56, // Zero Page,X
        CLI = 0x58, //
        EOR_Y = 0x59, // Absolute,Y
        EOR_X = 0x5D, // Absolute,X
        LSR_X = 0x5E, // Absolute,X
        RTS = 0x60,
        ADC_INDX = 0x61, // (Indirect,X)
        ADC_Z = 0x65, // Zero Page
        ROR_Z = 0x66, // Zero Page
        PLA = 0x68,
        ADC_I = 0x69, // Immediate
        ROR_ACC = 0x6A, // Accumulator
        JMP_IND = 0x6C, // Indirect
        ADC = 0x6D, // Absolute
        ROR = 0x6E, // Absolute
        BVS = 0x70, //
        ADC_INDY = 0x71, // (Indirect),Y
        ADC_ZX = 0x75, // Zero Page,X
        ROR_ZX = 0x76, // Zero Page,X
        SEI = 0x78, //
        ADC_Y = 0x79, // Absolute,Y
        ADC_X = 0x7D, // Absolute,X
        ROR_X = 0x7E, // Absolute,X
        STA_INDX = 0x81, // (Indirect,X)
        STY_Z = 0x84, // Zero Page
        STA_Z = 0x85, // Zero Page
        STX_Z = 0x86, // Zero Page
        DEY = 0x88, //
        TXA = 0x8A, //
        STY = 0x8C, // Absolute
        STA = 0x8D, // Absolute
        STX = 0x8E, // Absolute
        BCC = 0x90, //
        STA_INDY = 0x91, // (Indirect),Y
        STY_ZX = 0x94, // Zero Page,X
        STA_ZX = 0x95, // Zero Page,X
        STX_ZY = 0x96, // Zero Page,Y
        TYA = 0x98, //
        STA_Y = 0x99, // Absolute,Y
        TXS = 0x9A, //
        STA_X = 0x9d, // Absolute,X
        LDY_I = 0xA0, //
        LDA_INDX = 0xA1, // (Indirect,X)
        LDX_I = 0xA2, // Immediate
        LDY_Z = 0xA4, // Zero Page
        LDA_Z = 0xA5, // Zero Page
        LDX_Z = 0xA6, // Zero Page
        TAY = 0xA8, //
        LDA_I = 0xA9, // Immediate
        TAX = 0xAA, //
        LDY = 0xAC, // Absolute
        LDA = 0xAD, // Absolute
        LDX = 0xAE, // Absolute
        BCS = 0xB0, //
        LDA_INDY = 0xB1, // (Indirect),Y
        LDY_ZX = 0xB4, // Zero Page,X
        LDA_ZX = 0xB5, // Zero Page,X
        LDX_ZY = 0xB6, // Zero Page,Y
        CLV = 0xB8, // Clear Overflov
        LDA_Y = 0xB9, // Absolute,Y
        TSX = 0xBA, //
        LDY_X = 0xBC, // Absolute,X
        LDA_X = 0xBD, // Absolute,X
        LDX_Y = 0xBE, // Absolute,Y
        CPY_I = 0xC0, // Immediate
        CMP_INDX = 0xC1, // (Indirect,X)
        CPY_Z = 0xC4, // Zero Page
        CMP_Z = 0xC5, // Zero Page
        DEC_Z = 0xC6, // Zero Page
        INY = 0xC8, //
        CMP_I = 0xC9, // Immediate
        DEX = 0xCA, //
        CPY = 0xCC, // Absolute
        CMP = 0xCD, // Absolute
        DEC = 0xCE, // Absolute
        BNE = 0xD0, //
        CMP_INDY = 0xD1, // (Indirect),Y
        CMP_ZX = 0xD5, // Zero Page,X
        DEC_ZX = 0xD6, // Zero Page,X
        CLD = 0xD8, //
        CMP_Y = 0xD9, // Absolute,Y
        CMP_X = 0xDD, // Absolute,X
        DEC_X = 0xDE, // Absolute,X
        CPX_I = 0xE0, // Immediate
        SBC_INDX = 0xE1, // (Indirect,X)
        CPX_Z = 0xE4, // Zero Page
        SBC_Z = 0xE5, // Zero Page
        INC_Z = 0xE6, // Zero Page
        INX = 0xE8, //
        SBC_I = 0xE9, // Immediate
        NOP = 0xEA, //
        SBC_I_01 = 0xEB, // Absolute
        CPX = 0xEC, // Absolute
        SBC = 0xED, // Absolute
        INC = 0xEE, // Absolute
        BEQ = 0xF0, //
        SBC_INDY = 0xF1, // (Indirect),Y
        SBC_ZX = 0xF5, // Zero Page,X
        INC_ZX = 0xF6, // Zero Page,X
        SED = 0xF8, //
        SBC_Y = 0xF9, // Absolute,Y
        SBC_X = 0xFD, // Absolute,X
        INC_X = 0xFE, // Absolute,X

        // Undocumented 6510 instructions
        // Specs from winc64 code
        // ASO == SLO == (ASL, ORA)
        //
        SLO_INDX = 0x03, // (Indirect, X)
        RLA_INDX = 0x23, // (Indirect, X)
        SRE_INDX = 0x43, // (Indirect, X)
        RRA_INDX = 0x63, // (Indirect, X)
        SAX_INDX = 0x83, // (Indirect, X)
        LAX_INDX = 0xA3, // (Indirect, X)
        DCP_INDX = 0xC3, // (Indirect, X)
        ISB_INDX = 0xE3, // (Indirect, X)
        SLO_Z = 0x07, // Zero
        RLA_Z = 0x27, // Zero
        SRE_Z = 0x47, // Zero
        RRA_Z = 0x67, // Zero
        SAX_Z = 0x87, // Zero
        LAX_Z = 0xA7, // Zero
        DCP_Z = 0xC7, // Zero
        ISB_Z = 0xE7, // Zero
        SLO_ZX = 0x17, // Zero, X
        RLA_ZX = 0x37, // Zero, X
        SRE_ZX = 0x57, // Zero, X
        RRA_ZX = 0x77, // Zero, X
        SAX_ZY = 0x97, // Zero, Y
        LAX_ZY = 0xB7, // Zero, Y
        DCP_ZX = 0xD7, // Zero, X
        ISB_ZX = 0xF7, // Zero, X
        SLO = 0x0F, // Absolute
        RLA = 0x2F, // Absolute
        SRE = 0x4F, // Absolute
        RRA = 0x6F, // Absolute
        SAX = 0x8F, // Absolute
        LAX = 0xAF, // Absolute
        DCP = 0xCF, // Absolute
        ISB = 0xEF, // Absolute
        SLO_INDY = 0x13, // (Indirect), Y
        RLA_INDY = 0x33, // (Indirect), Y
        SRE_INDY = 0x53, // (Indirect), Y
        RRA_INDY = 0x73, // (Indirect), Y
        SHA_INDY = 0x93, // (Indirect), Y
        LAX_INDY = 0xB3, // (Indirect), Y
        DCP_INDY = 0xD3, // (Indirect), Y
        ISB_INDY = 0xF3, // (Indirect), Y
        SLO_Y = 0x1b, // Absolute, Y
        RLA_Y = 0x3b, // Absolute, Y
        SRE_Y = 0x5b, // Absolute, Y
        RRA_Y = 0x7b, // Absolute, Y
        SHS_Y = 0x9b, // Absolute, Y
        LAS_Y = 0xBb, // Absolute, Y
        DCP_Y = 0xDb, // Absolute, Y
        ISB_Y = 0xFb, // Absolute, Y
        ANC_I = 0x0b, // Immediate
        ANC_I_01 = 0x2b, // Immediate
        ASR_I = 0x4b, // Immediate
        ARR_I = 0x6b, // Immediate
        ANE_I = 0x8b, // Immediate
        LXA_I = 0xab, // Immediate same as OAL
        SBX_I = 0xcb, // Immediate
        // public final static int SBC_I = 0xeb, // Immediate, already def...
        SLO_X = 0x1f, // (Absolute, X)
        RLA_X = 0x3f, // (Absolute, X)
        SRE_X = 0x5f, // (Absolute, X)
        RRA_X = 0x7f, // (Absolute, X)
        SHA_Y = 0x9f, // (Absolute, X)
        LAX_Y = 0xbf, // (Absolute, Y)
        DCP_X = 0xdf, // (Absolute, X)
        ISB_X = 0xff, // (Absolute, X)
        LOAD_FILE = 0x02, // HALT_00, is now load routine...
        HALT_01 = 0x12, // not used...
        HALT_02 = 0x22, // not used...
        HALT_03 = 0x32, // not used...
        HALT_04 = 0x42, // not used...
        HALT_05 = 0x52, // not used...
        HALT_06 = 0x62, // not used...
        HALT_07 = 0x72, // not used...
        HALT_08 = 0x82, // not used...
        HALT_09 = 0x92, // not used...
        HALT_10 = 0xB2, // not used...
        HALT_11 = 0xC2, // not used...
        HALT_12 = 0xD2, // not used...
        HALT_13 = 0xE2, // not used...
        HALT_14 = 0xF2, // not used...

    }
}